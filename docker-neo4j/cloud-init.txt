#cloud-config
package_upgrade: true
apt:
  sources:
    docker.list:
      source: deb [arch=amd64] https://download.docker.com/linux/ubuntu $RELEASE stable
      keyid: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
packages:
  - docker-ce
  - docker-ce-cli
write_files:
  - owner: root:root
    path: /etc/deployment/scripts/setup_data_disk.sh
    content: |
      #!/bin/bash
      # This script is necessary to set up the data disk that will
      # be passed into the Neo4j docker instance and used as the
      # mount point for the Neo4J data.
      # The ARM script only mounts a single data disk.  It is safe
      # to assume that on a new VM, this data disk is located at /dev/sdc.
      # If you have a more complicated setup, then do examine what this
      # script is doing and modify accordingly.
      # create a partition table for the disk
      parted -s /dev/sdc mklabel msdos
      # create a single large partition
      parted -s /dev/sdc mkpart primary ext4 0\% 100\%
      # install the file system
      mkfs.ext4 /dev/sdc1
      # create the mount point
      mkdir /datadisk
      # mount the disk
      sudo mount /dev/sdc1 /datadisk/
      # add mount to /etc/fstab to persist across reboots
      echo "/dev/sdc1    /datadisk/    ext4    defaults 0 0" >> /etc/fstab
  - owner: root:root
    path: /etc/deployment/scripts/run_docker_neo4j_apoc.sh
    content: |
      #!/bin/bash
      # * curl, unzip and jq being installed
      # * having a valid bloom license file
      NEO4J_VERSION=4.1.3
      # Create neo4j user with no login
      sudo useradd -M neo4j
      sudo usermod -L neo4j
      # Create data directory
      sudo mkdir -p /datadisk/neo4j/data 
      sudo chown -R neo4j /datadisk/neo4j/data
      sudo chgrp -R neo4j /datadisk/neo4j/data
      # Create import directory
      sudo mkdir -p /datadisk/neo4j/import
      sudo chown -R neo4j /datadisk/neo4j/import
      sudo chgrp -R neo4j /datadisk/neo4j/import
      # Create plugins directory
      sudo mkdir -p /datadisk/neo4j/plugins
      sudo chown -R neo4j /datadisk/neo4j/plugins
      sudo chgrp -R neo4j /datadisk/neo4j/plugins
      #Group gets write permissions here
      sudo chmod -R u+rwX,g+rwX,o+wrx /datadisk/neo4j/plugins # N.b. if you make external changes to the plugins dir you must restart neo4j before it will pickup new plugins
      # Create a logs group for all things log related
      sudo groupadd logs
      # add neo4j to logs group
      sudo usermod -a -G logs neo4j
      sudo mkdir -p /datadisk/logs/neo4j
      sudo chown -R root /datadisk/logs/neo4j
      sudo chgrp -R logs /datadisk/logs/neo4j
      sudo chmod -R u+rwX,g+rwX,o+wrx /datadisk/logs
      # if docker does not run as root user
      docker_user=neo4j
      sudo usermod -a -G logs "${docker_user}"
      sudo usermod -a -G neo4j "${docker_user}"
      # add neo4j user to docker group
      sudo usermod -aG docker neo4j
      cd /datadisk/neo4j/plugins
      curl -L -C - -O -J "https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/4.1.0.4/apoc-4.1.0.4-all.jar"
      cd ..
      # pull docker image for neo4j
      docker pull neo4j:4.1.3
      # run docker image
      #groups=( $( id --real --groups neo4j ) )
      sudo su - neo4j
      docker run \
      -d \
      -e NEO4J_apoc_import_file_enabled=true \
      -e NEO4J_apoc_export_file_enabled=true \
      -e NEO4J_dbms_security_procedures_unrestricted=apoc.\\\* \
      -e NEO4J_AUTH=neo4j/C9rctBr08k0er \
      -v "datadisk/neo4j/plugins":/plugins \
      -p 7474:7474 \
      -p 7687:7687 \
      -v "datadisk/neo4j/data":/data \
      -v "datadisk/neo4j/import":/var/lib/neo4j/import \
      -v "/datadisk/logs/neo4j":/logs \
      --user="$(id -u neo4j):$(id -g neo4j)" \
      --name=neo4j \
      neo4j:4.1.3     
runcmd:
  - sh /etc/deployment/scripts/setup_data_disk.sh
  - sh /etc/deployment/scripts/run_docker_neo4j_apoc.sh